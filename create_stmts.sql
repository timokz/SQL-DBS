

-- Table for Entity (ER): Theatre
CREATE TABLE Theatre (
  t_Name VARCHAR(64),
  Address VARCHAR(64),
  t_Capacity INT,
  private_or_public NUMBER(1),
  PRIMARY KEY (t_Name)
);

-- Table for Entity (ER): Performance
CREATE TABLE E_PERFORMANCE (
  p_Name VARCHAR(64),
  t_name VARCHAR(64),
  p_Date DATE NOT NULL,
  Direction VARCHAR(64) NOT NULL,
  Languages VARCHAR(8),
  PRIMARY KEY (p_Name),
  FOREIGN KEY (t_name) REFERENCES THEATRE(t_Name)
) ;


-- Table for Entity (ER): Ticket
CREATE TABLE Ticket (
  Ticket_ID INT GENERATED BY DEFAULT AS IDENTITY,
  Seating_Category VARCHAR(32),
  p_Name Varchar(64),
  PRIMARY KEY (Ticket_ID),
  FOREIGN KEY (p_Name) REFERENCES E_PERFORMANCE,
  CONSTRAINT seatcat CHECK (Seating_Category IN ('disabled', 'reservation', 'choice of seat')) --c
);
-- Table for Entity (ER): Dance
CREATE TABLE Dance (
  Genre VARCHAR(32),
  p_Name VARCHAR(64),
  PRIMARY KEY (P_NAME),
  FOREIGN KEY (P_NAME) REFERENCES E_PERFORMANCE (P_NAME) ON DELETE CASCADE
);
-- Table for Entity (ER): Play
CREATE TABLE Play (
  Premiere NUMBER(1),
  p_Name VARCHAR(64),
  PRIMARY KEY (P_NAME),
  FOREIGN KEY (P_NAME) REFERENCES E_PERFORMANCE (P_NAME) ON DELETE CASCADE
);

-- Table for Entity (ER): box office
CREATE TABLE box_office (
  b_Name VARCHAR(32),
  Webshop VARCHAR(100),
  b_Location VARCHAR(32),
  t_Name VARCHAR(64),
  Opening_Hours VARCHAR(32),
  PRIMARY KEY (Webshop),
  FOREIGN KEY (t_name) REFERENCES THEATRE(t_name)
);

-- Table for Entity (ER): Audience Member
CREATE TABLE Audience_Member (
  Customer_ID  INT, --c
  Age INT NOT NULL,
  Name VARCHAR(32),
  Discount VARCHAR(32),
  Transaction_ID VARCHAR(32),
  PRIMARY KEY (Customer_ID)
);

-- Table for Entity (ER): Transaction
CREATE TABLE Transaction (
  Transaction_ID VARCHAR(32),
  Payment_Method VARCHAR(32),
  t_date TIMESTAMP,
  Amount INT,
  b_Name VARCHAR(100),
  PRIMARY KEY (Transaction_ID),
  FOREIGN KEY (b_Name) REFERENCES box_office(Webshop)
);

-- Table for Relation (ER): invites
CREATE TABLE invites (
  C_ID_inv INT,
  C_ID_receive INT,
    PRIMARY KEY (C_ID_inv,C_ID_receive),
    FOREIGN KEY (C_ID_inv) REFERENCES Audience_Member(Customer_ID),
    FOREIGN KEY (C_ID_receive) REFERENCES Audience_Member(Customer_ID),
  CONSTRAINT non_self CHECK (C_ID_inv != C_ID_receive)
);

CREATE TABLE buys (
  Transaction_ID VARCHAR(32),
  Customer_ID  INT,
  Ticket_ID INT,
  PRIMARY KEY (Transaction_ID,Customer_ID,Ticket_ID),
  FOREIGN KEY (Transaction_ID) REFERENCES TRANSACTION(Transaction_ID),
  FOREIGN KEY (Customer_ID) REFERENCES AUDIENCE_MEMBER(Customer_ID),
  FOREIGN KEY (Ticket_ID) REFERENCES TICKET(Ticket_ID)
                  )


CREATE OR REPLACE PROCEDURE del_theatre(
   t_t_Name  IN  Theatre.t_Name%TYPE,
   t_error_code OUT NUMBER
)
AS
  BEGIN
      DELETE
      FROM THEATRE
      WHERE t_t_Name = THEATRE.t_Name;
      t_error_code := SQL%ROWCOUNT;
      IF (t_error_code = 1)
      THEN
        COMMIT;
    ELSE
        ROLLBACK ;
        END IF;
      EXCEPTION
      WHEN OTHERS
      THEN
      t_error_code := SQLCODE;
  END del_theatre;

    CREATE TRIGGER specialchar AFTER INSERT ON A11848158.Theatre
        BEGIN
UPDATE THEATRE SET T_NAME = REPLACE(T_NAME,'ß','ss');
UPDATE THEATRE SET ADDRESS = REPLACE(ADDRESS,'ß','ss');
END;
